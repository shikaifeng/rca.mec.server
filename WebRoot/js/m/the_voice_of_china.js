// Generated by CoffeeScript 1.7.1
var $luckDialog, $luckDialogButtonItem, $luckDialogCount, $luckDialogText, $luckDialogTitle, $luckDrawButtonItem, $luckDrawTitleCnt, $luckDrawTitleTip, $luckDrawWheel, $luckOverlay, LuckDialogView, LuckDrawButtonView, checkLuckUrl, checkPlayCount, filterPlayResult, getPlayResultID, getUDID, goToTVMall, hideDialog, isPlay, playCount, playLuckDraw, receiveResult, resetDialogButton, resetLuckDrawButton, resetLuckDrawInfo, resetReceiveResult, setDegree, setReceiveResult, showDialog, totalDeg, _isURL;

_isURL = function(url) {
  var re_weburl;
  re_weburl = new RegExp("^" + "(?:(?:https?|ftp)://)" + "(?:\\S+(?::\\S*)?@)?" + "(?:" + "(?!10(?:\\.\\d{1,3}){3})" + "(?!127(?:\\.\\d{1,3}){3})" + "(?!169\\.254(?:\\.\\d{1,3}){2})" + "(?!192\\.168(?:\\.\\d{1,3}){2})" + "(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})" + "(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])" + "(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}" + "(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))" + "|" + "(?:(?:[a-z\\u00a1-\\uffff0-9]+-?)*[a-z\\u00a1-\\uffff0-9]+)" + "(?:\\.(?:[a-z\\u00a1-\\uffff0-9]+-?)*[a-z\\u00a1-\\uffff0-9]+)*" + "(?:\\.(?:[a-z\\u00a1-\\uffff]{2,}))" + ")" + "(?::\\d{2,5})?" + "(?:/[^\\s]*)?" + "$", "i");
  return url.match(re_weburl) != null;
};

setDegree = function($obj, deg) {
  if (deg != null) {
    return $obj != null ? $obj.css({
      "-webkit-transform": "rotate(" + deg + "deg)",
      "-moz-transform": "rotate(" + deg + "deg)",
      "-ms-transform": "rotate(" + deg + "deg)",
      "-o-transform": "rotate(" + deg + "deg)",
      "transform": "rotate(" + deg + "deg)"
    }) : void 0;
  }
};

checkPlayCount = function(count) {
  if (count != null) {
    $("#play_count").val(count);
  }
  return $("#play_count").val() | 0;
};

checkLuckUrl = function(url) {
  if ((url != null) && (typeof _isURL === "function" ? _isURL(url) : void 0)) {
    $("#lucky_url").val(url);
  }
  return $("#lucky_url").val();
};

goToTVMall = function(url) {
  var _ref, _url;
  _url = url ? url : checkLuckUrl();
  if (_url !== "") {
    return (_ref = window.Zhiping) != null ? typeof _ref.goToTaoBao === "function" ? _ref.goToTaoBao(_url) : void 0 : void 0;
  }
};

getUDID = function() {
  var _ref;
  if ($("#udid").val() != null) {
    return $("#udid").val();
  } else {
    return (_ref = window.Zhiping) != null ? typeof _ref.get_udid === "function" ? _ref.get_udid() : void 0 : void 0;
  }
};

getPlayResultID = function() {
  if ($("#get_play_result_id").val() != null) {
    return $("#get_play_result_id").val();
  } else {
    return null;
  }
};

filterPlayResult = function(position, isluck) {
  var item, retult, _i, _len;
  for (_i = 0, _len = luckList.length; _i < _len; _i++) {
    item = luckList[_i];
    if (item["position"] === position) {
      retult = item;
    }
  }
  $.extend(retult, {
    "isluck": isluck
  });
  return retult;
};

$luckDrawTitleCnt = $('#luck_draw_title_content');

$luckDrawTitleTip = $('#luck_draw_title_tip');

$luckDrawButtonItem = $('#luck_draw_button_item_1');

$luckDrawWheel = $('#luck_draw_wheel');

$luckOverlay = $('#luck_overlay');

$luckDialog = $('#luck_dialog');

$luckDialogTitle = $('#luck_dialog_title');

$luckDialogText = $('#luck_dialog_text');

$luckDialogCount = $('#luck_dialog_count');

$luckDialogButtonItem = $('#luck_dialog_button_item_1');

isPlay = false;

playCount = checkPlayCount();

totalDeg = 0;

receiveResult = null;

resetReceiveResult = function() {
  return receiveResult = null;
};

setReceiveResult = function(position, isluck) {
  resetReceiveResult();
  return receiveResult = filterPlayResult(position, isluck);
};

resetDialogButton = function(addClassName, callback) {
  var rvClass, _i, _len, _ref;
  _ref = ["button-award", "button-ok", "button-draw"];
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    rvClass = _ref[_i];
    $luckDialogButtonItem.removeClass("" + rvClass);
  }
  $luckDialogButtonItem.addClass("" + addClassName);
  return LuckDialogView.onSelect = callback;
};

showDialog = function(result) {
  $luckOverlay.addClass('fn-show');
  if (result["isluck"] === true) {
    $luckDialogTitle.html("\u4E2D\u5956\u4E86");
    $luckDialogText.html("\u606D\u559C\u60A8\u83B7\u5F97<span class=\"mark\">" + result["description"] + "</span>");
    resetDialogButton("button-award", function() {
      if (typeof debug !== "undefined" && debug !== null) {
        console.log("<showDialog>:\nLUCK, reward To TVMall !!!");
      }
      return goToTVMall();
    });
  } else {
    $luckDialogTitle.html("\u53EF\u60DC\u4E86");
    $luckDialogText.html("\u771F\u9057\u61BE\u5927\u5956\u64E6\u80A9\u800C\u8FC7");
    if (playCount === 0) {
      resetDialogButton("button-ok", function() {
        if (typeof debug !== "undefined" && debug !== null) {
          console.log("<showDialog>:\nGame over !!!");
        }
        hideDialog();
        return LuckDrawButtonView.active();
      });
    } else {
      resetDialogButton("button-draw", function() {
        if (typeof debug !== "undefined" && debug !== null) {
          console.log("<showDialog>:\nPlay again !!!");
        }
        hideDialog();
        return LuckDrawButtonView.active();
      });
    }
  }
  $luckDialogCount.html("" + playCount);
  return $luckDialog.addClass('fn-show');
};

hideDialog = function() {
  $luckOverlay.removeClass('fn-show');
  return $luckDialog.removeClass('fn-show');
};

playLuckDraw = function() {
  var ajaxLimit, currentDeg, currentSpeed, endDeg, endingCriticalDeg, getPlayResult, infiniteRotate, infiniteRotating, pendingSpeed;
  if (isPlay === true) {
    if (typeof debug !== "undefined" && debug !== null) {
      console.log("<playLuckDraw>:\nplayLuckDraw is doing!!!");
    }
    return false;
  }
  if (playCount === 0) {
    if (typeof debug !== "undefined" && debug !== null) {
      console.log("<playLuckDraw>:\nplayCount is 0!\nGAME OVER!!!");
    }
    return false;
  }
  hideDialog();
  resetReceiveResult();
  isPlay = true;
  currentDeg = totalDeg % 360;
  currentSpeed = 0;
  pendingSpeed = 15;
  endDeg = null;
  endingCriticalDeg = null;
  infiniteRotating = null;
  infiniteRotate = function(_isEnding) {
    if (_isEnding == null) {
      _isEnding = false;
    }
    if (currentSpeed < pendingSpeed && _isEnding === false) {
      currentSpeed++;
      currentDeg = currentDeg % 360 + currentSpeed;
    } else if (currentSpeed === pendingSpeed && _isEnding === false) {
      if (receiveResult === null) {
        currentDeg = currentDeg % 360 + currentSpeed;
      } else {
        if (endingCriticalDeg === null) {
          endDeg = 1440 + (6 - receiveResult["position"]) * 60;
          endingCriticalDeg = endDeg - 120;
        }
        if (currentDeg % endingCriticalDeg === 0) {
          _isEnding = true;
        } else {
          currentDeg += currentSpeed;
        }
      }
    } else if (_isEnding === true) {
      currentDeg += currentSpeed;
      currentSpeed--;
    }
    setDegree($luckDrawWheel, currentDeg);
    if (_isEnding === true && currentSpeed === 0) {
      clearTimeout(infiniteRotating);
      infiniteRotating = null;
      totalDeg = currentDeg % 360;
      showDialog(receiveResult);
      LuckDialogView.active();
      isPlay = false;
    } else {
      infiniteRotating = setTimeout(function() {
        return infiniteRotate(_isEnding);
      }, 10);
    }
    return infiniteRotating;
  };
  infiniteRotate();
  ajaxLimit = 3;
  getPlayResult = function() {
    return $.ajax({
      type: 'GET',
      url: '/api/v1/draw_result_register',
      data: {
        id: getPlayResultID(),
        udid: getUDID()
      },
      dataType: 'json',
      success: function(data, status, xhr) {
        if (data["status"] === 0) {
          setReceiveResult(data["data"]["position"], data["data"]["isluck"]);
          playCount = checkPlayCount(data["data"]["lucky_surplus_count"]);
          checkLuckUrl(data["data"]["url"]);
          return resetLuckDrawInfo();
        }
      },
      error: function(xhr, errorType, error) {
        if (ajaxLimit > 0) {
          return getPlayResult();
        }
      },
      complete: function(xhr, status) {
        return ajaxLimit--;
      }
    });
  };
  return getPlayResult();
};

LuckDialogView = new View({
  id: 'luckDialogButton',
  el: "#luck_dialog",
  itemidPrefix: 'luck_dialog_button_item_',
  focusClassName: 'button-active',
  up: function() {
    return null;
  },
  down: function() {
    return null;
  },
  left: function() {
    return null;
  },
  right: function() {
    return null;
  },
  onSelect: function(item) {
    return null;
  }
});

resetLuckDrawInfo = function() {
  if (checkLuckUrl()) {
    $luckDrawTitleCnt.html("\u60A8\u6709\u5956\u54C1\u5C1A\u672A\u9886\u53D6");
    $luckDrawTitleTip.html("\u9886\u5B8C\u518D\u56DE\u6765\u62BD\u5956\u5427");
    resetLuckDrawButton("button-award", function() {
      if (typeof debug !== "undefined" && debug !== null) {
        console.log("<resetLuckDrawButton>:\nLUCK, reward To TVMall !!!");
      }
      return goToTVMall();
    });
  } else if (playCount > 0) {
    $luckDrawTitleCnt.html("\u60A8\u8FD8\u6709<em class=\"mark\">" + playCount + "</em>\u6B21\u62BD\u5956\u673A\u4F1A");
    $luckDrawTitleTip.html("\u6309OK\u952E\u7ACB\u5373\u62BD\u5956");
    resetLuckDrawButton("button-draw", function() {
      if (typeof debug !== "undefined" && debug !== null) {
        console.log("<resetLuckDrawButton>:\nPlay again !!!");
      }
      return playLuckDraw();
    });
  } else if (playCount === 0) {
    $luckDrawTitleCnt.html("\u53C2\u4E0E<span class=\"mark\">\u300A\u4E2D\u56FD\u597D\u58F0\u97F3\u300B</span>\u4E92\u52A8");
    $luckDrawTitleTip.html("\u7B54\u9898\u83B7\u62BD\u5956\u8D44\u683C");
    return resetLuckDrawButton("button-over", function() {
      if (typeof debug !== "undefined" && debug !== null) {
        console.log("<resetLuckDrawButton>:\nGame over !!!");
      }
      return null;
    });
  }
};

resetLuckDrawButton = function(addClassName, callback) {
  var rvClass, _i, _len, _ref;
  _ref = ["button-draw", "button-award", "button-over"];
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    rvClass = _ref[_i];
    $luckDrawButtonItem.removeClass("" + rvClass);
  }
  $luckDrawButtonItem.addClass("" + addClassName);
  return LuckDrawButtonView.onSelect = callback;
};

LuckDrawButtonView = new View({
  id: 'LuckDrawButton',
  el: "#luck_draw_button",
  itemidPrefix: 'luck_draw_button_item_',
  focusClassName: 'button-active',
  up: function() {
    return null;
  },
  down: function() {
    return null;
  },
  left: function() {
    return null;
  },
  right: function() {
    return null;
  },
  onSelect: function(item) {
    return null;
  }
});

LuckDialogView.enableNavigation();

LuckDrawButtonView.enableNavigation();

$(function() {
  resetLuckDrawInfo();
  return LuckDrawButtonView.active();
});
